package com.salesforce.automation;

import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.annotations.AfterClass;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.salesforce.automaton.Base;
import com.salesforce.automaton.Constants;
import com.salesforce.pages.LandingPage;
import com.salesforce.pages.LoginPage;

public class TestCase_Login_DevAcc {
	LoginPage   loginPage;
	LandingPage landingPage;
	String      className = TestCase_Login_DevAcc.class.getName();

	@BeforeClass
	public void InitializePage() {
		loginPage = new LoginPage();
		landingPage = new LandingPage();
		Base.getImplicitWait(20);
	}

	@BeforeMethod
	public void initializeURL() {
		Base.getLogger(className).info("Browser initialized......");
		Base.openUrl(Constants.URL_SALESFORCELOGIN);
	}

	@Test
	public void A_InvalidUserName() {
		Base.getLogger(className).info(
		        "Test started -------------- A_InvalidUserName");
		loginPage.setTxtUsername("kushalsh");
		Base.getLogger(className).info(
		        "Entered the user name " + loginPage.getTxtUserName());
		loginPage.setTxtPassword(Constants.INPUT_PASSWORD);
		Base.getLogger(className).info(
		        "Entered the password " + Constants.INPUT_PASSWORD);
		loginPage.clickBtnLogin();
		Base.getLogger(className).info("Clicked on Login Button");
		WebDriverWait wait = new WebDriverWait(Base.getDriverInstance(), 20);
		wait.until(ExpectedConditions.visibilityOf(loginPage
		        .getLblInvalidLogin()));
		Base.getLogger(className).info(
		        "Waiting for the validation message to appear");
		Assert.assertTrue(
		        loginPage.getLblInvalidLogintext().equals(
		                Constants.ERROR_INVALID_LOGIN),
		        "The assertion is true as the error appears");
	}

	@Test
	public void B_InvalidPassword() {
		Base.getLogger(className).info(
		        "Test started-------------- B_InvalidPassword");
		loginPage.setTxtUsername(Constants.INPUT_USERNAME);
		Base.getLogger(className).info(
		        "Entered the user name " + Constants.INPUT_USERNAME);
		loginPage.setTxtPassword("Test");
		Base.getLogger(className).info(
		        "Entered the password " + loginPage.getTxtPassword());
		loginPage.clickBtnLogin();
		Base.getLogger(className).info("Clicked on Login Button");
		WebDriverWait wait = new WebDriverWait(Base.getDriverInstance(), 20);
		wait.until(ExpectedConditions.visibilityOf(loginPage
		        .getLblInvalidLogin()));
		Base.getLogger(className).info(
		        "Waiting for the validation message to appear");
		Assert.assertTrue(
		        loginPage.getLblInvalidLogintext().equals(
		                Constants.ERROR_INVALID_LOGIN),
		        "The assertion is true as the error appears");
	}

	@Test
	public void C_ValidLogin() {
		Base.getLogger(className).info(
		        "Test started -------------- C_ValidLogin");
		loginPage.setTxtUsername(Constants.INPUT_USERNAME);
		Base.getLogger(className).info(
		        "Entered the user name " + Constants.INPUT_USERNAME);
		loginPage.setTxtPassword(Constants.INPUT_PASSWORD);
		Base.getLogger(className).info(
		        "Entered the password " + Constants.INPUT_PASSWORD);
		loginPage.clickBtnLogin();
		Base.getLogger(className).info("Clicked on Login Button");
		try {
			WebDriverWait wait = new WebDriverWait(Base.getDriverInstance(), 20);
			wait.until(ExpectedConditions.visibilityOf(landingPage
			        .getLblSetup()));
			Base.getLogger(className).info("Waiting for the landing page");
			Assert.assertTrue(landingPage.getLblSetuptext().contains("Setup"),
			        "The assertion is true as the Landing page appears");
			Base.getLogger(className).info("Landing page appears successfully");
		} catch (Exception e) {
			e.printStackTrace();
			System.out
			        .println("Verify the ip is whitelisted for the user in salesforce");
			Base.getLogger(className)
			        .fatal("Getting email authenticatin hence need to change test property");
		}

	}

	@AfterMethod
	@AfterClass
	public void closeBrowser() {
		// Base.closeWindow();
	}

}
